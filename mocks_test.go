// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that readerMock does implement reader.
// If this is not the case, regenerate this file with moq.
var _ reader = &readerMock{}

// readerMock is a mock implementation of reader.
//
// 	func TestSomethingThatUsesreader(t *testing.T) {
//
// 		// make and configure a mocked reader
// 		mockedreader := &readerMock{
// 			ReadFunc: func(bytes []byte) (int, error) {
// 				panic("mock out the Read method")
// 			},
// 		}
//
// 		// use mockedreader in code that requires reader
// 		// and then make assertions.
//
// 	}
type readerMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(bytes []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// Bytes is the bytes argument value.
			Bytes []byte
		}
	}
	lockRead sync.RWMutex
}

// Read calls ReadFunc.
func (mock *readerMock) Read(bytes []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("readerMock.ReadFunc: method is nil but reader.Read was just called")
	}
	callInfo := struct {
		Bytes []byte
	}{
		Bytes: bytes,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(bytes)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedreader.ReadCalls())
func (mock *readerMock) ReadCalls() []struct {
	Bytes []byte
} {
	var calls []struct {
		Bytes []byte
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}
